import EventAccessType from './eventAccessType';
import EventAccessUrl from './eventAccessUrl';

import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericErrors from '@/shared/core/logic/genericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';

export interface IEventAccessProps extends PartialAutoGenerated {
  eventId: UniqueEntityID;
  url: EventAccessUrl;
  type: EventAccessType;
}

export default class EventAccess extends Entity<IEventAccessProps> {
  constructor(props: IEventAccessProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get eventId(): UniqueEntityID {
    return this.props.eventId;
  }

  get url(): EventAccessUrl {
    return this.props.url;
  }

  get type(): EventAccessType {
    return this.props.type;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deletedAt(): Date | undefined {
    return this.props.deletedAt;
  }

  public static create(props: IEventAccessProps, id?: UniqueEntityID) {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      { argument: props.eventId, argumentName: 'id do evento' },
      { argument: props.url, argumentName: 'url' },
      { argument: props.type, argumentName: 'tipo' },
    ]);

    if (!guardedProps.succeeded) {
      throw new GenericErrors.InvalidParam(guardedProps.message);
    }

    return new EventAccess(props, id);
  }
}
