import EventSlug from './eventSlug';
import EventStatus from './eventStatus';

import EventConfig from '../eventConfig';

import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericErrors from '@/shared/core/logic/genericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';
import { EventStatusEnum } from '@/shared/types/user/event';

export interface IEventProps extends PartialAutoGenerated {
  userId: UniqueEntityID;
  slug: EventSlug;
  status?: EventStatus;
  name: string;
  description?: string;
  start_at: Date;
  end_at: Date;

  config?: EventConfig;
}

export default class Event extends Entity<IEventProps> {
  constructor(props: IEventProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get userId(): UniqueEntityID {
    return this.props.userId;
  }

  get slug(): EventSlug {
    return this.props.slug;
  }

  get status(): EventStatus {
    return this.props.status;
  }

  get name(): string {
    return this.props.name;
  }

  get description(): string | undefined {
    return this.props.description;
  }

  get start_at(): Date {
    return this.props.start_at;
  }

  get end_at(): Date {
    return this.props.end_at;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deletedAt(): Date | undefined {
    return this.props.deletedAt;
  }

  get config(): EventConfig | undefined {
    return this.props.config;
  }

  set config(config: EventConfig) {
    this.props.config = config;
  }

  public static create(props: IEventProps, id?: UniqueEntityID) {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      { argument: props.name, argumentName: 'nome' },
      { argument: props.userId, argumentName: 'id do usu√°rio' },
      { argument: props.slug, argumentName: 'link de acesso' },
      { argument: props.start_at, argumentName: 'data de inicio' },
      { argument: props.end_at, argumentName: 'data de fim' },
    ]);

    if (!guardedProps.succeeded) {
      throw new GenericErrors.InvalidParam(guardedProps.message);
    }

    const propsWithDefaults = {
      status: EventStatus.create(EventStatusEnum.DRAFT),
      ...props,
    };

    return new Event(propsWithDefaults, id);
  }
}
