import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericErrors from '@/shared/core/logic/genericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';

export interface IEventConfigProps extends PartialAutoGenerated {
  eventId: UniqueEntityID;

  primaryColor?: string;
  secondaryColor?: string;

  primaryContrast?: string;
  secondaryContrast?: string;

  backgroundColor?: string;
  backgroundContrast?: string;

  textColorPrimary?: string;
  textColorSecondary?: string;

  welcomeMessage?: string | null;
}

export default class EventConfig extends Entity<IEventConfigProps> {
  constructor(props: IEventConfigProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get eventId(): UniqueEntityID {
    return this.props.eventId;
  }

  get primaryColor(): string {
    return this.props.primaryColor;
  }

  get secondaryColor(): string {
    return this.props.secondaryColor;
  }

  get primaryContrast(): string {
    return this.props.primaryContrast;
  }

  get secondaryContrast(): string {
    return this.props.secondaryContrast;
  }

  get backgroundContrast(): string {
    return this.props.backgroundContrast;
  }

  get backgroundColor(): string {
    return this.props.backgroundColor;
  }

  get textColorPrimary(): string {
    return this.props.textColorPrimary;
  }

  get textColorSecondary(): string {
    return this.props.textColorSecondary;
  }

  get welcomeMessage(): string {
    return this.props.welcomeMessage;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deletedAt(): Date | undefined {
    return this.props.deletedAt;
  }

  public static create(props: IEventConfigProps, id?: UniqueEntityID) {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      { argument: props.eventId, argumentName: 'id do evento' },
    ]);

    if (!guardedProps.succeeded) {
      throw new GenericErrors.InvalidParam(guardedProps.message);
    }

    const propsWithDefaults = {
      primaryColor: '#000000',
      secondaryColor: '#000000',

      primaryContrast: '#ffffff',
      secondaryContrast: '#000000',

      backgroundColor: '#ffffff',
      backgroundContrast: '#f2f2f2',

      textColorPrimary: '#000000',
      textColorSecondary: '#000000',

      welcomeMessage: 'Bem-vindo ao nosso evento!',
      ...props,
    };

    return new EventConfig(propsWithDefaults, id);
  }
}
