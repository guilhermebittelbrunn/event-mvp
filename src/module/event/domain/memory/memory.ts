import IpAddress from '../ipAddress';

import File from '@/module/shared/domain/file/file';
import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericErrors from '@/shared/core/logic/genericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';

export interface IMemoryProps extends PartialAutoGenerated {
  eventId: UniqueEntityID;
  fileId?: UniqueEntityID;
  identifier?: string;
  description?: string;
  ipAddress: IpAddress;
  message?: string;

  file?: File;
}

export default class Memory extends Entity<IMemoryProps> {
  constructor(props: IMemoryProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get eventId(): UniqueEntityID {
    return this.props.eventId;
  }

  get fileId(): UniqueEntityID | undefined {
    return this.props.fileId;
  }

  set fileId(fileId: UniqueEntityID | undefined) {
    this.props.fileId = fileId;
  }

  get identifier(): string {
    return this.props.identifier;
  }

  get description(): string {
    return this.props.description;
  }

  get ipAddress(): IpAddress {
    return this.props.ipAddress;
  }

  get message(): string {
    return this.props.message;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deletedAt(): Date | undefined {
    return this.props.deletedAt;
  }

  get file(): File | undefined {
    return this.props.file;
  }

  set file(file: File) {
    this.props.file = file;
  }

  public static create(props: IMemoryProps, id?: UniqueEntityID) {
    const guardedProps = Guard.againstNullOrUndefined(props.eventId, 'id do evento');

    if (!guardedProps.succeeded) {
      throw new GenericErrors.InvalidParam(guardedProps.message);
    }

    return new Memory(props, id);
  }
}
