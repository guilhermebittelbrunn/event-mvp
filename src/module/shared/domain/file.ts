import { File as MulterFile } from '@nest-lab/fastify-multer';

import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericErrors from '@/shared/core/logic/genericErrors';
import Guard, { GuardArgumentCollection } from '@/shared/core/logic/guard';
import { isEmpty } from '@/shared/core/utils/undefinedHelpers';
import { PartialAutoGenerated } from '@/shared/types/common';

export interface IFileProps extends PartialAutoGenerated {
  entityId: UniqueEntityID;
  name: string;
  path: string;
  size: number;
  url: string;

  file?: MulterFile;
}

export default class File extends Entity<IFileProps> {
  constructor(props: IFileProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get entityId(): UniqueEntityID {
    return this.props.entityId;
  }

  get name(): string {
    return this.props.name;
  }

  get path(): string {
    return this.props.path;
  }

  set path(path: string) {
    this.props.path = path;
  }

  get size(): number {
    return this.props.size;
  }

  get file(): MulterFile | undefined {
    return this.props.file;
  }

  get url(): string {
    return this.props.url;
  }

  set url(url: string) {
    this.props.url = url;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deletedAt(): Date | undefined {
    return this.props.deletedAt;
  }

  makePath(): void {
    if (this.file) {
      const uniqueName = `${Date.now()}-${this.file.originalname}`;
      const completePath = `event/${this.entityId.toValue()}/${uniqueName}`;
      this.path = completePath;
    }
  }

  public static create(props: IFileProps, id?: UniqueEntityID) {
    const guardedProps: GuardArgumentCollection = [
      { argument: props.entityId, argumentName: 'id da entidade' },
      { argument: props.name, argumentName: 'nome do arquivo' },
      { argument: props.size, argumentName: 'tamanho do arquivo' },
    ];

    if (isEmpty(props.file)) {
      guardedProps.push({ argument: props.path, argumentName: 'caminho do arquivo' });
      guardedProps.push({ argument: props.url, argumentName: 'endere√ßo do arquivo' });
    }

    const guardResult = Guard.againstNullOrUndefinedBulk(guardedProps);

    if (!guardResult.succeeded) {
      throw new GenericErrors.InvalidParam(guardResult.message);
    }

    const file = new File(props, id);

    if (props.file) {
      file.makePath();
    }

    return file;
  }
}
