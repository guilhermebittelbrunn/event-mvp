import LogError from './logError';
import LogLevel from './logLevel';

import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericErrors from '@/shared/core/logic/genericErrors';
import Guard, { GuardArgumentCollection } from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';
import { LogLevelEnum } from '@/shared/types/shared/log';

export interface ILogProps extends PartialAutoGenerated {
  requestId?: UniqueEntityID;
  eventId?: UniqueEntityID;
  service?: string;
  method?: string;
  metadata?: Record<string, unknown>;
  message?: string;
  level?: LogLevel;
  error?: LogError;
}

export default class Log extends Entity<ILogProps> {
  constructor(props: ILogProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get requestId(): UniqueEntityID {
    return this.props.requestId;
  }

  get eventId(): UniqueEntityID | undefined {
    return this.props.eventId;
  }

  get metadata(): Record<string, unknown> | undefined {
    return this.props.metadata;
  }

  get message(): string | undefined {
    return this.props.message;
  }

  get level(): LogLevel | undefined {
    return this.props.level;
  }

  get service(): string | undefined {
    return this.props.service || this.props.error?.service;
  }

  get method(): string | undefined {
    return this.props.method || this.props.error?.method;
  }

  get errorStatus(): number | undefined {
    return this.props.error?.errorStatus;
  }

  get errorMessage(): string | undefined {
    return this.props.error?.errorMessage;
  }

  get errorStack(): string | undefined {
    return this.props.error?.errorStack;
  }

  get error(): LogError | undefined {
    return this.props.error;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  public static create(props: ILogProps, id?: UniqueEntityID) {
    const guardedProps: GuardArgumentCollection = [];

    if (props.level?.value === LogLevelEnum.ERROR && !props.error) {
      guardedProps.push({ argument: props.error, argumentName: 'erro' });
    }

    const guardResult = Guard.againstNullOrUndefinedBulk(guardedProps);

    if (!guardResult.succeeded) {
      throw new GenericErrors.InvalidParam(guardResult.message);
    }

    const propsWithDefaults = {
      level: LogLevel.create(LogLevelEnum.INFO),
      ...props,
    };

    return new Log(propsWithDefaults, id);
  }
}
